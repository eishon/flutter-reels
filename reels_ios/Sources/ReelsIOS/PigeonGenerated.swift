// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Analytics event data
///
/// Generated class from Pigeon that represents data sent in messages.
struct AnalyticsEvent {
  var eventName: String
  var eventProperties: [String?: String?]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AnalyticsEvent? {
    let eventName = pigeonVar_list[0] as! String
    let eventProperties = pigeonVar_list[1] as! [String?: String?]

    return AnalyticsEvent(
      eventName: eventName,
      eventProperties: eventProperties
    )
  }
  func toList() -> [Any?] {
    return [
      eventName,
      eventProperties,
    ]
  }
}

/// Share data for social sharing
///
/// Generated class from Pigeon that represents data sent in messages.
struct ShareData {
  var videoId: String
  var videoUrl: String
  var title: String
  var description: String
  var thumbnailUrl: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ShareData? {
    let videoId = pigeonVar_list[0] as! String
    let videoUrl = pigeonVar_list[1] as! String
    let title = pigeonVar_list[2] as! String
    let description = pigeonVar_list[3] as! String
    let thumbnailUrl: String? = nilOrValue(pigeonVar_list[4])

    return ShareData(
      videoId: videoId,
      videoUrl: videoUrl,
      title: title,
      description: description,
      thumbnailUrl: thumbnailUrl
    )
  }
  func toList() -> [Any?] {
    return [
      videoId,
      videoUrl,
      title,
      description,
      thumbnailUrl,
    ]
  }
}

/// Screen state data for native tracking
///
/// Generated class from Pigeon that represents data sent in messages.
struct ScreenStateData {
  var screenName: String
  var state: String
  var timestamp: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ScreenStateData? {
    let screenName = pigeonVar_list[0] as! String
    let state = pigeonVar_list[1] as! String
    let timestamp: Int64? = nilOrValue(pigeonVar_list[2])

    return ScreenStateData(
      screenName: screenName,
      state: state,
      timestamp: timestamp
    )
  }
  func toList() -> [Any?] {
    return [
      screenName,
      state,
      timestamp,
    ]
  }
}

/// Video state data for playback tracking
///
/// Generated class from Pigeon that represents data sent in messages.
struct VideoStateData {
  var videoId: String
  var state: String
  var position: Int64? = nil
  var duration: Int64? = nil
  var timestamp: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> VideoStateData? {
    let videoId = pigeonVar_list[0] as! String
    let state = pigeonVar_list[1] as! String
    let position: Int64? = nilOrValue(pigeonVar_list[2])
    let duration: Int64? = nilOrValue(pigeonVar_list[3])
    let timestamp: Int64? = nilOrValue(pigeonVar_list[4])

    return VideoStateData(
      videoId: videoId,
      state: state,
      position: position,
      duration: duration,
      timestamp: timestamp
    )
  }
  func toList() -> [Any?] {
    return [
      videoId,
      state,
      position,
      duration,
      timestamp,
    ]
  }
}

private class PigeonGeneratedPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return AnalyticsEvent.fromList(self.readValue() as! [Any?])
    case 130:
      return ShareData.fromList(self.readValue() as! [Any?])
    case 131:
      return ScreenStateData.fromList(self.readValue() as! [Any?])
    case 132:
      return VideoStateData.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonGeneratedPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AnalyticsEvent {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ShareData {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ScreenStateData {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? VideoStateData {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonGeneratedPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonGeneratedPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonGeneratedPigeonCodecWriter(data: data)
  }
}

class PigeonGeneratedPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonGeneratedPigeonCodec(readerWriter: PigeonGeneratedPigeonCodecReaderWriter())
}

/// API for accessing user authentication token from native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ReelsFlutterTokenApi {
  /// Get the current access token from native platform
  func getAccessToken() throws -> String?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ReelsFlutterTokenApiSetup {
  static var codec: FlutterStandardMessageCodec { PigeonGeneratedPigeonCodec.shared }
  /// Sets up an instance of `ReelsFlutterTokenApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ReelsFlutterTokenApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Get the current access token from native platform
    let getAccessTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reels_flutter.ReelsFlutterTokenApi.getAccessToken\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAccessTokenChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAccessToken()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAccessTokenChannel.setMessageHandler(nil)
    }
  }
}
/// API for sending analytics events to native analytics SDK
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ReelsFlutterAnalyticsApiProtocol {
  /// Track a custom analytics event
  func trackEvent(event eventArg: AnalyticsEvent, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class ReelsFlutterAnalyticsApi: ReelsFlutterAnalyticsApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonGeneratedPigeonCodec {
    return PigeonGeneratedPigeonCodec.shared
  }
  /// Track a custom analytics event
  func trackEvent(event eventArg: AnalyticsEvent, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsFlutterAnalyticsApi.trackEvent\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// API for notifying native about button interactions
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ReelsFlutterButtonEventsApiProtocol {
  /// Called before like button is clicked (for optimistic UI)
  func onBeforeLikeButtonClick(videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called after like button click completes (with updated state)
  func onAfterLikeButtonClick(videoId videoIdArg: String, isLiked isLikedArg: Bool, likeCount likeCountArg: Int64, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when share button is clicked
  func onShareButtonClick(shareData shareDataArg: ShareData, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class ReelsFlutterButtonEventsApi: ReelsFlutterButtonEventsApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonGeneratedPigeonCodec {
    return PigeonGeneratedPigeonCodec.shared
  }
  /// Called before like button is clicked (for optimistic UI)
  func onBeforeLikeButtonClick(videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onBeforeLikeButtonClick\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([videoIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called after like button click completes (with updated state)
  func onAfterLikeButtonClick(videoId videoIdArg: String, isLiked isLikedArg: Bool, likeCount likeCountArg: Int64, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onAfterLikeButtonClick\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([videoIdArg, isLikedArg, likeCountArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when share button is clicked
  func onShareButtonClick(shareData shareDataArg: ShareData, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onShareButtonClick\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([shareDataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// API for notifying native about screen and video state changes
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ReelsFlutterStateApiProtocol {
  /// Notify native when screen state changes
  func onScreenStateChanged(state stateArg: ScreenStateData, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Notify native when video state changes
  func onVideoStateChanged(state stateArg: VideoStateData, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class ReelsFlutterStateApi: ReelsFlutterStateApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonGeneratedPigeonCodec {
    return PigeonGeneratedPigeonCodec.shared
  }
  /// Notify native when screen state changes
  func onScreenStateChanged(state stateArg: ScreenStateData, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onScreenStateChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Notify native when video state changes
  func onVideoStateChanged(state stateArg: VideoStateData, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onVideoStateChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// API for handling navigation gestures
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ReelsFlutterNavigationApiProtocol {
  /// Called when user swipes left
  func onSwipeLeft(completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when user swipes right
  func onSwipeRight(completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class ReelsFlutterNavigationApi: ReelsFlutterNavigationApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonGeneratedPigeonCodec {
    return PigeonGeneratedPigeonCodec.shared
  }
  /// Called when user swipes left
  func onSwipeLeft(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsFlutterNavigationApi.onSwipeLeft\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when user swipes right
  func onSwipeRight(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsFlutterNavigationApi.onSwipeRight\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
