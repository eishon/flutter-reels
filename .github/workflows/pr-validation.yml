name: PR Validation

on:
  pull_request:
    branches: [ master, main ]
    types: [ opened, synchronize, reopened ]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate PR title
        run: |
          PR_TITLE='${{ github.event.pull_request.title }}'
          
          # Check if PR title follows conventional commit format
          if ! echo "$PR_TITLE" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?: .+'; then
            echo "::warning::PR title should follow conventional commit format"
            echo "::warning::Example: feat: add new feature"
            echo "::warning::Types: feat, fix, docs, style, refactor, perf, test, chore, build, ci, revert"
          fi

      - name: Check PR description
        run: |
          DESCRIPTION="${{ github.event.pull_request.body }}"
          
          if [ -z "$DESCRIPTION" ]; then
            echo "::error::PR description is required"
            exit 1
          fi
          
          echo "âœ… PR description provided"

      - name: Validate branch name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          
          # Check if branch follows naming convention
          if [[ ! "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|release)/.+ ]]; then
            echo "::warning::Branch name should follow convention: feature/, bugfix/, hotfix/, or release/"
            echo "::warning::Current branch: $BRANCH_NAME"
          else
            echo "âœ… Branch name follows convention"
          fi

      - name: Check for merge conflicts
        run: |
          git fetch origin ${{ github.base_ref }}
          
          if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q "<<<<<<< "; then
            echo "::error::This PR has merge conflicts. Please resolve them before merging."
            exit 1
          fi
          
          echo "âœ… No merge conflicts detected"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          echo "ðŸ”’ Running security checks..."
          
          # Check for sensitive files
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -qE "\.(pem|key|p12|jks|keystore)$"; then
            echo "::error::Potential sensitive files detected in PR"
            exit 1
          fi
          
          # Check for hardcoded secrets (basic check)
          if git diff origin/${{ github.base_ref }}...HEAD | grep -qiE "(api[_-]?key|password|secret|token|credential).*=.*['\"][^'\"]{20,}"; then
            echo "::warning::Potential hardcoded secrets detected. Please review."
          fi
          
          echo "âœ… Basic security checks passed"

  size-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        run: |
          FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
          LINES_CHANGED=$(git diff --stat origin/${{ github.base_ref }}...HEAD | tail -1 | grep -oE '[0-9]+ insertions|[0-9]+ deletions' | grep -oE '[0-9]+' | paste -sd+ | bc)
          
          echo "ðŸ“Š PR Statistics:"
          echo "Files changed: $FILES_CHANGED"
          echo "Lines changed: $LINES_CHANGED"
          
          if [ "$FILES_CHANGED" -gt 50 ]; then
            echo "::warning::This PR changes $FILES_CHANGED files. Consider breaking it into smaller PRs."
          fi
          
          if [ "$LINES_CHANGED" -gt 1000 ]; then
            echo "::warning::This PR changes $LINES_CHANGED lines. Consider breaking it into smaller PRs."
          fi
