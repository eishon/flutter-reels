// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Configuration for the Reels SDK
///
/// Generated class from Pigeon that represents data sent in messages.
struct ReelsConfig {
  var autoPlay: Bool
  var showControls: Bool
  var loopVideos: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReelsConfig? {
    let autoPlay = pigeonVar_list[0] as! Bool
    let showControls = pigeonVar_list[1] as! Bool
    let loopVideos = pigeonVar_list[2] as! Bool

    return ReelsConfig(
      autoPlay: autoPlay,
      showControls: showControls,
      loopVideos: loopVideos
    )
  }
  func toList() -> [Any?] {
    return [
      autoPlay,
      showControls,
      loopVideos,
    ]
  }
}

/// Data model for a video in the reels
///
/// Generated class from Pigeon that represents data sent in messages.
struct VideoData {
  var id: String
  var url: String
  var thumbnailUrl: String? = nil
  var title: String? = nil
  var description: String? = nil
  var authorName: String? = nil
  var authorAvatarUrl: String? = nil
  var likeCount: Int64? = nil
  var commentCount: Int64? = nil
  var shareCount: Int64? = nil
  var isLiked: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> VideoData? {
    let id = pigeonVar_list[0] as! String
    let url = pigeonVar_list[1] as! String
    let thumbnailUrl: String? = nilOrValue(pigeonVar_list[2])
    let title: String? = nilOrValue(pigeonVar_list[3])
    let description: String? = nilOrValue(pigeonVar_list[4])
    let authorName: String? = nilOrValue(pigeonVar_list[5])
    let authorAvatarUrl: String? = nilOrValue(pigeonVar_list[6])
    let likeCount: Int64? = nilOrValue(pigeonVar_list[7])
    let commentCount: Int64? = nilOrValue(pigeonVar_list[8])
    let shareCount: Int64? = nilOrValue(pigeonVar_list[9])
    let isLiked: Bool? = nilOrValue(pigeonVar_list[10])

    return VideoData(
      id: id,
      url: url,
      thumbnailUrl: thumbnailUrl,
      title: title,
      description: description,
      authorName: authorName,
      authorAvatarUrl: authorAvatarUrl,
      likeCount: likeCount,
      commentCount: commentCount,
      shareCount: shareCount,
      isLiked: isLiked
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      url,
      thumbnailUrl,
      title,
      description,
      authorName,
      authorAvatarUrl,
      likeCount,
      commentCount,
      shareCount,
      isLiked,
    ]
  }
}

/// Product information for tagging in reels
///
/// Generated class from Pigeon that represents data sent in messages.
struct ProductData {
  var id: String
  var name: String
  var imageUrl: String? = nil
  var price: Double? = nil
  var currency: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ProductData? {
    let id = pigeonVar_list[0] as! String
    let name = pigeonVar_list[1] as! String
    let imageUrl: String? = nilOrValue(pigeonVar_list[2])
    let price: Double? = nilOrValue(pigeonVar_list[3])
    let currency: String? = nilOrValue(pigeonVar_list[4])

    return ProductData(
      id: id,
      name: name,
      imageUrl: imageUrl,
      price: price,
      currency: currency
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      imageUrl,
      price,
      currency,
    ]
  }
}

private class PigeonGeneratedPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return ReelsConfig.fromList(self.readValue() as! [Any?])
    case 130:
      return VideoData.fromList(self.readValue() as! [Any?])
    case 131:
      return ProductData.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonGeneratedPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ReelsConfig {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? VideoData {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ProductData {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonGeneratedPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonGeneratedPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonGeneratedPigeonCodecWriter(data: data)
  }
}

class PigeonGeneratedPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonGeneratedPigeonCodec(readerWriter: PigeonGeneratedPigeonCodecReaderWriter())
}

/// API called by native platform to communicate with Flutter
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ReelsFlutterApi {
  /// Initialize the Reels SDK with configuration
  func initialize(config: ReelsConfig) throws
  /// Show reels with the provided video data
  func showReels(videos: [VideoData]) throws
  /// Update a specific video's data (e.g., after a like/share)
  func updateVideo(video: VideoData) throws
  /// Close the reels view
  func closeReels() throws
  /// Update the configuration
  func updateConfig(config: ReelsConfig) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ReelsFlutterApiSetup {
  static var codec: FlutterStandardMessageCodec { PigeonGeneratedPigeonCodec.shared }
  /// Sets up an instance of `ReelsFlutterApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ReelsFlutterApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Initialize the Reels SDK with configuration
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! ReelsConfig
        do {
          try api.initialize(config: configArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    /// Show reels with the provided video data
    let showReelsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.showReels\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showReelsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let videosArg = args[0] as! [VideoData]
        do {
          try api.showReels(videos: videosArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      showReelsChannel.setMessageHandler(nil)
    }
    /// Update a specific video's data (e.g., after a like/share)
    let updateVideoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.updateVideo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateVideoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let videoArg = args[0] as! VideoData
        do {
          try api.updateVideo(video: videoArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updateVideoChannel.setMessageHandler(nil)
    }
    /// Close the reels view
    let closeReelsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.closeReels\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      closeReelsChannel.setMessageHandler { _, reply in
        do {
          try api.closeReels()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      closeReelsChannel.setMessageHandler(nil)
    }
    /// Update the configuration
    let updateConfigChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.updateConfig\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateConfigChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! ReelsConfig
        do {
          try api.updateConfig(config: configArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updateConfigChannel.setMessageHandler(nil)
    }
  }
}
/// API called by Flutter to communicate with native platform
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ReelsNativeApiProtocol {
  /// Called when a reel is viewed (displayed for significant time)
  func onReelViewed(videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when user likes/unlikes a video
  func onReelLiked(videoId videoIdArg: String, isLiked isLikedArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when user shares a video
  func onReelShared(videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when user comments on a video
  func onReelCommented(videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when a product in the reel is clicked
  func onProductClicked(productId productIdArg: String, videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when reels view is closed
  func onReelsClosed(completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when an error occurs
  func onError(errorMessage errorMessageArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Request access token for authenticated API calls
  func getAccessToken(completion: @escaping (Result<String?, PigeonError>) -> Void)
}
class ReelsNativeApi: ReelsNativeApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonGeneratedPigeonCodec {
    return PigeonGeneratedPigeonCodec.shared
  }
  /// Called when a reel is viewed (displayed for significant time)
  func onReelViewed(videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelViewed\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([videoIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when user likes/unlikes a video
  func onReelLiked(videoId videoIdArg: String, isLiked isLikedArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelLiked\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([videoIdArg, isLikedArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when user shares a video
  func onReelShared(videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelShared\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([videoIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when user comments on a video
  func onReelCommented(videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelCommented\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([videoIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when a product in the reel is clicked
  func onProductClicked(productId productIdArg: String, videoId videoIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onProductClicked\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([productIdArg, videoIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when reels view is closed
  func onReelsClosed(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelsClosed\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when an error occurs
  func onError(errorMessage errorMessageArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorMessageArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Request access token for authenticated API calls
  func getAccessToken(completion: @escaping (Result<String?, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reels_flutter.ReelsNativeApi.getAccessToken\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: String? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
}
