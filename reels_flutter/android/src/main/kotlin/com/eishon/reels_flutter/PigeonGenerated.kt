// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.eishon.reels_flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * Analytics event data
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AnalyticsEvent (
  val eventName: String,
  val eventProperties: Map<String?, String?>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AnalyticsEvent {
      val eventName = pigeonVar_list[0] as String
      val eventProperties = pigeonVar_list[1] as Map<String?, String?>
      return AnalyticsEvent(eventName, eventProperties)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      eventName,
      eventProperties,
    )
  }
}

/**
 * Share data for social sharing
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class ShareData (
  val videoId: String,
  val videoUrl: String,
  val title: String,
  val description: String,
  val thumbnailUrl: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ShareData {
      val videoId = pigeonVar_list[0] as String
      val videoUrl = pigeonVar_list[1] as String
      val title = pigeonVar_list[2] as String
      val description = pigeonVar_list[3] as String
      val thumbnailUrl = pigeonVar_list[4] as String?
      return ShareData(videoId, videoUrl, title, description, thumbnailUrl)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      videoId,
      videoUrl,
      title,
      description,
      thumbnailUrl,
    )
  }
}

/**
 * Screen state data for native tracking
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class ScreenStateData (
  val screenName: String,
  val state: String,
  val timestamp: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ScreenStateData {
      val screenName = pigeonVar_list[0] as String
      val state = pigeonVar_list[1] as String
      val timestamp = pigeonVar_list[2] as Long?
      return ScreenStateData(screenName, state, timestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      screenName,
      state,
      timestamp,
    )
  }
}

/**
 * Video state data for playback tracking
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class VideoStateData (
  val videoId: String,
  val state: String,
  val position: Long? = null,
  val duration: Long? = null,
  val timestamp: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): VideoStateData {
      val videoId = pigeonVar_list[0] as String
      val state = pigeonVar_list[1] as String
      val position = pigeonVar_list[2] as Long?
      val duration = pigeonVar_list[3] as Long?
      val timestamp = pigeonVar_list[4] as Long?
      return VideoStateData(videoId, state, position, duration, timestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      videoId,
      state,
      position,
      duration,
      timestamp,
    )
  }
}
private open class PigeonGeneratedPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AnalyticsEvent.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ShareData.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ScreenStateData.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VideoStateData.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AnalyticsEvent -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is ShareData -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is ScreenStateData -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is VideoStateData -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * API for accessing user authentication token from native
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface ReelsFlutterTokenApi {
  /** Get the current access token from native platform */
  fun getAccessToken(): String?

  companion object {
    /** The codec used by ReelsFlutterTokenApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonGeneratedPigeonCodec()
    }
    /** Sets up an instance of `ReelsFlutterTokenApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: ReelsFlutterTokenApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reels_flutter.ReelsFlutterTokenApi.getAccessToken$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getAccessToken())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * API for sending analytics events to native analytics SDK
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class ReelsFlutterAnalyticsApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by ReelsFlutterAnalyticsApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonGeneratedPigeonCodec()
    }
  }
  /** Track a custom analytics event */
  fun trackEvent(eventArg: AnalyticsEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reels_flutter.ReelsFlutterAnalyticsApi.trackEvent$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * API for notifying native about button interactions
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class ReelsFlutterButtonEventsApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by ReelsFlutterButtonEventsApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonGeneratedPigeonCodec()
    }
  }
  /** Called before like button is clicked (for optimistic UI) */
  fun onBeforeLikeButtonClick(videoIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onBeforeLikeButtonClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(videoIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Called after like button click completes (with updated state) */
  fun onAfterLikeButtonClick(videoIdArg: String, isLikedArg: Boolean, likeCountArg: Long, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onAfterLikeButtonClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(videoIdArg, isLikedArg, likeCountArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Called when share button is clicked */
  fun onShareButtonClick(shareDataArg: ShareData, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onShareButtonClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(shareDataArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * API for notifying native about screen and video state changes
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class ReelsFlutterStateApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by ReelsFlutterStateApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonGeneratedPigeonCodec()
    }
  }
  /** Notify native when screen state changes */
  fun onScreenStateChanged(stateArg: ScreenStateData, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onScreenStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Notify native when video state changes */
  fun onVideoStateChanged(stateArg: VideoStateData, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onVideoStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * API for handling navigation gestures
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class ReelsFlutterNavigationApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by ReelsFlutterNavigationApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonGeneratedPigeonCodec()
    }
  }
  /** Called when user swipes left */
  fun onSwipeLeft(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reels_flutter.ReelsFlutterNavigationApi.onSwipeLeft$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Called when user swipes right */
  fun onSwipeRight(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reels_flutter.ReelsFlutterNavigationApi.onSwipeRight$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
