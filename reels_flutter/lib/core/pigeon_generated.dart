// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// Analytics event data
class AnalyticsEvent {
  AnalyticsEvent({required this.eventName, required this.eventProperties});

  String eventName;

  Map<String?, String?> eventProperties;

  Object encode() {
    return <Object?>[eventName, eventProperties];
  }

  static AnalyticsEvent decode(Object result) {
    result as List<Object?>;
    return AnalyticsEvent(
      eventName: result[0]! as String,
      eventProperties: (result[1] as Map<Object?, Object?>?)!
          .cast<String?, String?>(),
    );
  }
}

/// Share data for social sharing
class ShareData {
  ShareData({
    required this.videoId,
    required this.videoUrl,
    required this.title,
    required this.description,
    this.thumbnailUrl,
  });

  String videoId;

  String videoUrl;

  String title;

  String description;

  String? thumbnailUrl;

  Object encode() {
    return <Object?>[videoId, videoUrl, title, description, thumbnailUrl];
  }

  static ShareData decode(Object result) {
    result as List<Object?>;
    return ShareData(
      videoId: result[0]! as String,
      videoUrl: result[1]! as String,
      title: result[2]! as String,
      description: result[3]! as String,
      thumbnailUrl: result[4] as String?,
    );
  }
}

/// Screen state data for native tracking
class ScreenStateData {
  ScreenStateData({
    required this.screenName,
    required this.state,
    this.timestamp,
  });

  String screenName;

  String state;

  int? timestamp;

  Object encode() {
    return <Object?>[screenName, state, timestamp];
  }

  static ScreenStateData decode(Object result) {
    result as List<Object?>;
    return ScreenStateData(
      screenName: result[0]! as String,
      state: result[1]! as String,
      timestamp: result[2] as int?,
    );
  }
}

/// Video state data for playback tracking
class VideoStateData {
  VideoStateData({
    required this.videoId,
    required this.state,
    this.position,
    this.duration,
    this.timestamp,
  });

  String videoId;

  String state;

  int? position;

  int? duration;

  int? timestamp;

  Object encode() {
    return <Object?>[videoId, state, position, duration, timestamp];
  }

  static VideoStateData decode(Object result) {
    result as List<Object?>;
    return VideoStateData(
      videoId: result[0]! as String,
      state: result[1]! as String,
      position: result[2] as int?,
      duration: result[3] as int?,
      timestamp: result[4] as int?,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is AnalyticsEvent) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ShareData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ScreenStateData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is VideoStateData) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return AnalyticsEvent.decode(readValue(buffer)!);
      case 130:
        return ShareData.decode(readValue(buffer)!);
      case 131:
        return ScreenStateData.decode(readValue(buffer)!);
      case 132:
        return VideoStateData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// API for accessing user authentication token from native
class ReelsFlutterTokenApi {
  /// Constructor for [ReelsFlutterTokenApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ReelsFlutterTokenApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty
           ? '.$messageChannelSuffix'
           : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Get the current access token from native platform
  Future<String?> getAccessToken() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterTokenApi.getAccessToken$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }
}

/// API for sending analytics events to native analytics SDK
abstract class ReelsFlutterAnalyticsApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Track a custom analytics event
  void trackEvent(AnalyticsEvent event);

  static void setUp(
    ReelsFlutterAnalyticsApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterAnalyticsApi.trackEvent$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterAnalyticsApi.trackEvent was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final AnalyticsEvent? arg_event = (args[0] as AnalyticsEvent?);
          assert(
            arg_event != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterAnalyticsApi.trackEvent was null, expected non-null AnalyticsEvent.',
          );
          try {
            api.trackEvent(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}

/// API for notifying native about button interactions
abstract class ReelsFlutterButtonEventsApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Called before like button is clicked (for optimistic UI)
  void onBeforeLikeButtonClick(String videoId);

  /// Called after like button click completes (with updated state)
  void onAfterLikeButtonClick(String videoId, bool isLiked, int likeCount);

  /// Called when share button is clicked
  void onShareButtonClick(ShareData shareData);

  static void setUp(
    ReelsFlutterButtonEventsApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onBeforeLikeButtonClick$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onBeforeLikeButtonClick was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_videoId = (args[0] as String?);
          assert(
            arg_videoId != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onBeforeLikeButtonClick was null, expected non-null String.',
          );
          try {
            api.onBeforeLikeButtonClick(arg_videoId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onAfterLikeButtonClick$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onAfterLikeButtonClick was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_videoId = (args[0] as String?);
          assert(
            arg_videoId != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onAfterLikeButtonClick was null, expected non-null String.',
          );
          final bool? arg_isLiked = (args[1] as bool?);
          assert(
            arg_isLiked != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onAfterLikeButtonClick was null, expected non-null bool.',
          );
          final int? arg_likeCount = (args[2] as int?);
          assert(
            arg_likeCount != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onAfterLikeButtonClick was null, expected non-null int.',
          );
          try {
            api.onAfterLikeButtonClick(
              arg_videoId!,
              arg_isLiked!,
              arg_likeCount!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onShareButtonClick$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onShareButtonClick was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final ShareData? arg_shareData = (args[0] as ShareData?);
          assert(
            arg_shareData != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterButtonEventsApi.onShareButtonClick was null, expected non-null ShareData.',
          );
          try {
            api.onShareButtonClick(arg_shareData!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}

/// API for notifying native about screen and video state changes
abstract class ReelsFlutterStateApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Notify native when screen state changes
  void onScreenStateChanged(ScreenStateData state);

  /// Notify native when video state changes
  void onVideoStateChanged(VideoStateData state);

  static void setUp(
    ReelsFlutterStateApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onScreenStateChanged$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onScreenStateChanged was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final ScreenStateData? arg_state = (args[0] as ScreenStateData?);
          assert(
            arg_state != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onScreenStateChanged was null, expected non-null ScreenStateData.',
          );
          try {
            api.onScreenStateChanged(arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onVideoStateChanged$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onVideoStateChanged was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoStateData? arg_state = (args[0] as VideoStateData?);
          assert(
            arg_state != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsFlutterStateApi.onVideoStateChanged was null, expected non-null VideoStateData.',
          );
          try {
            api.onVideoStateChanged(arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}

/// API for handling navigation gestures
abstract class ReelsFlutterNavigationApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Called when user swipes left
  void onSwipeLeft();

  /// Called when user swipes right
  void onSwipeRight();

  static void setUp(
    ReelsFlutterNavigationApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterNavigationApi.onSwipeLeft$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onSwipeLeft();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterNavigationApi.onSwipeRight$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onSwipeRight();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}
