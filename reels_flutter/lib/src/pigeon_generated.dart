// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// Configuration for the Reels SDK
class ReelsConfig {
  ReelsConfig({
    required this.autoPlay,
    required this.showControls,
    required this.loopVideos,
  });

  bool autoPlay;

  bool showControls;

  bool loopVideos;

  Object encode() {
    return <Object?>[autoPlay, showControls, loopVideos];
  }

  static ReelsConfig decode(Object result) {
    result as List<Object?>;
    return ReelsConfig(
      autoPlay: result[0]! as bool,
      showControls: result[1]! as bool,
      loopVideos: result[2]! as bool,
    );
  }
}

/// Data model for a video in the reels
class VideoData {
  VideoData({
    required this.id,
    required this.url,
    this.thumbnailUrl,
    this.title,
    this.description,
    this.authorName,
    this.authorAvatarUrl,
    this.likeCount,
    this.commentCount,
    this.shareCount,
    this.isLiked,
  });

  String id;

  String url;

  String? thumbnailUrl;

  String? title;

  String? description;

  String? authorName;

  String? authorAvatarUrl;

  int? likeCount;

  int? commentCount;

  int? shareCount;

  bool? isLiked;

  Object encode() {
    return <Object?>[
      id,
      url,
      thumbnailUrl,
      title,
      description,
      authorName,
      authorAvatarUrl,
      likeCount,
      commentCount,
      shareCount,
      isLiked,
    ];
  }

  static VideoData decode(Object result) {
    result as List<Object?>;
    return VideoData(
      id: result[0]! as String,
      url: result[1]! as String,
      thumbnailUrl: result[2] as String?,
      title: result[3] as String?,
      description: result[4] as String?,
      authorName: result[5] as String?,
      authorAvatarUrl: result[6] as String?,
      likeCount: result[7] as int?,
      commentCount: result[8] as int?,
      shareCount: result[9] as int?,
      isLiked: result[10] as bool?,
    );
  }
}

/// Product information for tagging in reels
class ProductData {
  ProductData({
    required this.id,
    required this.name,
    this.imageUrl,
    this.price,
    this.currency,
  });

  String id;

  String name;

  String? imageUrl;

  double? price;

  String? currency;

  Object encode() {
    return <Object?>[id, name, imageUrl, price, currency];
  }

  static ProductData decode(Object result) {
    result as List<Object?>;
    return ProductData(
      id: result[0]! as String,
      name: result[1]! as String,
      imageUrl: result[2] as String?,
      price: result[3] as double?,
      currency: result[4] as String?,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is ReelsConfig) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is VideoData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ProductData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return ReelsConfig.decode(readValue(buffer)!);
      case 130:
        return VideoData.decode(readValue(buffer)!);
      case 131:
        return ProductData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// API called by native platform to communicate with Flutter
class ReelsFlutterApi {
  /// Constructor for [ReelsFlutterApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ReelsFlutterApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty
           ? '.$messageChannelSuffix'
           : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Initialize the Reels SDK with configuration
  Future<void> initialize(ReelsConfig config) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.initialize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Show reels with the provided video data
  Future<void> showReels(List<VideoData> videos) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.showReels$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[videos]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Update a specific video's data (e.g., after a like/share)
  Future<void> updateVideo(VideoData video) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.updateVideo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[video]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Close the reels view
  Future<void> closeReels() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.closeReels$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Update the configuration
  Future<void> updateConfig(ReelsConfig config) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.reels_flutter.ReelsFlutterApi.updateConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

/// API called by Flutter to communicate with native platform
abstract class ReelsNativeApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Called when a reel is viewed (displayed for significant time)
  void onReelViewed(String videoId);

  /// Called when user likes/unlikes a video
  void onReelLiked(String videoId, bool isLiked);

  /// Called when user shares a video
  void onReelShared(String videoId);

  /// Called when user comments on a video
  void onReelCommented(String videoId);

  /// Called when a product in the reel is clicked
  void onProductClicked(String productId, String videoId);

  /// Called when reels view is closed
  void onReelsClosed();

  /// Called when an error occurs
  void onError(String errorMessage);

  /// Request access token for authenticated API calls
  String? getAccessToken();

  static void setUp(
    ReelsNativeApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelViewed$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelViewed was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_videoId = (args[0] as String?);
          assert(
            arg_videoId != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelViewed was null, expected non-null String.',
          );
          try {
            api.onReelViewed(arg_videoId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelLiked$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelLiked was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_videoId = (args[0] as String?);
          assert(
            arg_videoId != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelLiked was null, expected non-null String.',
          );
          final bool? arg_isLiked = (args[1] as bool?);
          assert(
            arg_isLiked != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelLiked was null, expected non-null bool.',
          );
          try {
            api.onReelLiked(arg_videoId!, arg_isLiked!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelShared$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelShared was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_videoId = (args[0] as String?);
          assert(
            arg_videoId != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelShared was null, expected non-null String.',
          );
          try {
            api.onReelShared(arg_videoId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelCommented$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelCommented was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_videoId = (args[0] as String?);
          assert(
            arg_videoId != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelCommented was null, expected non-null String.',
          );
          try {
            api.onReelCommented(arg_videoId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onProductClicked$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onProductClicked was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_productId = (args[0] as String?);
          assert(
            arg_productId != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onProductClicked was null, expected non-null String.',
          );
          final String? arg_videoId = (args[1] as String?);
          assert(
            arg_videoId != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onProductClicked was null, expected non-null String.',
          );
          try {
            api.onProductClicked(arg_productId!, arg_videoId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onReelsClosed$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onReelsClosed();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onError$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onError was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_errorMessage = (args[0] as String?);
          assert(
            arg_errorMessage != null,
            'Argument for dev.flutter.pigeon.reels_flutter.ReelsNativeApi.onError was null, expected non-null String.',
          );
          try {
            api.onError(arg_errorMessage!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.reels_flutter.ReelsNativeApi.getAccessToken$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final String? output = api.getAccessToken();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}
