// Mocks generated by Mockito 5.4.6 from annotations
// in reels_flutter/test/helpers/test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:reels_flutter/core/pigeon_generated.dart' as _i2;
import 'package:reels_flutter/core/services/analytics_service.dart' as _i6;
import 'package:reels_flutter/core/services/button_events_service.dart' as _i7;
import 'package:reels_flutter/data/datasources/video_local_data_source.dart'
    as _i8;
import 'package:reels_flutter/data/models/video_model.dart' as _i3;
import 'package:reels_flutter/domain/entities/video_entity.dart' as _i4;
import 'package:reels_flutter/domain/repositories/video_repository.dart' as _i5;
import 'package:reels_flutter/domain/usecases/get_video_by_id_usecase.dart'
    as _i11;
import 'package:reels_flutter/domain/usecases/get_videos_usecase.dart' as _i10;
import 'package:reels_flutter/domain/usecases/increment_share_count_usecase.dart'
    as _i13;
import 'package:reels_flutter/domain/usecases/toggle_like_usecase.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReelsFlutterAnalyticsApi_0 extends _i1.SmartFake
    implements _i2.ReelsFlutterAnalyticsApi {
  _FakeReelsFlutterAnalyticsApi_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeReelsFlutterButtonEventsApi_1 extends _i1.SmartFake
    implements _i2.ReelsFlutterButtonEventsApi {
  _FakeReelsFlutterButtonEventsApi_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVideoModel_2 extends _i1.SmartFake implements _i3.VideoModel {
  _FakeVideoModel_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVideoEntity_3 extends _i1.SmartFake implements _i4.VideoEntity {
  _FakeVideoEntity_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVideoRepository_4 extends _i1.SmartFake
    implements _i5.VideoRepository {
  _FakeVideoRepository_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ReelsFlutterAnalyticsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockReelsFlutterAnalyticsApi extends _i1.Mock
    implements _i2.ReelsFlutterAnalyticsApi {
  MockReelsFlutterAnalyticsApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void trackEvent(_i2.AnalyticsEvent? event) => super.noSuchMethod(
    Invocation.method(#trackEvent, [event]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ReelsFlutterButtonEventsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockReelsFlutterButtonEventsApi extends _i1.Mock
    implements _i2.ReelsFlutterButtonEventsApi {
  MockReelsFlutterButtonEventsApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onBeforeLikeButtonClick(String? videoId) => super.noSuchMethod(
    Invocation.method(#onBeforeLikeButtonClick, [videoId]),
    returnValueForMissingStub: null,
  );

  @override
  void onAfterLikeButtonClick(String? videoId, bool? isLiked, int? likeCount) =>
      super.noSuchMethod(
        Invocation.method(#onAfterLikeButtonClick, [
          videoId,
          isLiked,
          likeCount,
        ]),
        returnValueForMissingStub: null,
      );

  @override
  void onShareButtonClick(_i2.ShareData? shareData) => super.noSuchMethod(
    Invocation.method(#onShareButtonClick, [shareData]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ReelsFlutterNavigationApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockReelsFlutterNavigationApi extends _i1.Mock
    implements _i2.ReelsFlutterNavigationApi {
  MockReelsFlutterNavigationApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onSwipeLeft() => super.noSuchMethod(
    Invocation.method(#onSwipeLeft, []),
    returnValueForMissingStub: null,
  );

  @override
  void onSwipeRight() => super.noSuchMethod(
    Invocation.method(#onSwipeRight, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ReelsFlutterStateApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockReelsFlutterStateApi extends _i1.Mock
    implements _i2.ReelsFlutterStateApi {
  MockReelsFlutterStateApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onScreenStateChanged(_i2.ScreenStateData? state) => super.noSuchMethod(
    Invocation.method(#onScreenStateChanged, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onVideoStateChanged(_i2.VideoStateData? state) => super.noSuchMethod(
    Invocation.method(#onVideoStateChanged, [state]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i6.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ReelsFlutterAnalyticsApi get api =>
      (super.noSuchMethod(
            Invocation.getter(#api),
            returnValue: _FakeReelsFlutterAnalyticsApi_0(
              this,
              Invocation.getter(#api),
            ),
          )
          as _i2.ReelsFlutterAnalyticsApi);

  @override
  void trackEvent(String? type, Map<String?, Object?>? data) =>
      super.noSuchMethod(
        Invocation.method(#trackEvent, [type, data]),
        returnValueForMissingStub: null,
      );

  @override
  void trackVideoView(String? videoId, int? position) => super.noSuchMethod(
    Invocation.method(#trackVideoView, [videoId, position]),
    returnValueForMissingStub: null,
  );

  @override
  void trackPageView(String? screenName) => super.noSuchMethod(
    Invocation.method(#trackPageView, [screenName]),
    returnValueForMissingStub: null,
  );

  @override
  void trackClick(String? element, Map<String?, Object?>? additionalData) =>
      super.noSuchMethod(
        Invocation.method(#trackClick, [element, additionalData]),
        returnValueForMissingStub: null,
      );

  @override
  void trackLike({
    required String? videoId,
    required bool? isLiked,
    int? likeCount,
  }) => super.noSuchMethod(
    Invocation.method(#trackLike, [], {
      #videoId: videoId,
      #isLiked: isLiked,
      #likeCount: likeCount,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void trackShare({required String? videoId}) => super.noSuchMethod(
    Invocation.method(#trackShare, [], {#videoId: videoId}),
    returnValueForMissingStub: null,
  );

  @override
  void trackError({
    required String? error,
    String? context,
    Map<String?, Object?>? additionalData,
  }) => super.noSuchMethod(
    Invocation.method(#trackError, [], {
      #error: error,
      #context: context,
      #additionalData: additionalData,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void trackVideoAppear({
    required String? videoId,
    int? position,
    String? screenName,
  }) => super.noSuchMethod(
    Invocation.method(#trackVideoAppear, [], {
      #videoId: videoId,
      #position: position,
      #screenName: screenName,
    }),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ButtonEventsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockButtonEventsService extends _i1.Mock
    implements _i7.ButtonEventsService {
  MockButtonEventsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ReelsFlutterButtonEventsApi get api =>
      (super.noSuchMethod(
            Invocation.getter(#api),
            returnValue: _FakeReelsFlutterButtonEventsApi_1(
              this,
              Invocation.getter(#api),
            ),
          )
          as _i2.ReelsFlutterButtonEventsApi);

  @override
  void onBeforeLikeButtonClick(String? videoId) => super.noSuchMethod(
    Invocation.method(#onBeforeLikeButtonClick, [videoId]),
    returnValueForMissingStub: null,
  );

  @override
  void onAfterLikeButtonClick(String? videoId, bool? isLiked, int? likeCount) =>
      super.noSuchMethod(
        Invocation.method(#onAfterLikeButtonClick, [
          videoId,
          isLiked,
          likeCount,
        ]),
        returnValueForMissingStub: null,
      );

  @override
  void onShareButtonClick({
    required String? videoId,
    required String? videoUrl,
    required String? title,
    required String? description,
    String? thumbnailUrl,
  }) => super.noSuchMethod(
    Invocation.method(#onShareButtonClick, [], {
      #videoId: videoId,
      #videoUrl: videoUrl,
      #title: title,
      #description: description,
      #thumbnailUrl: thumbnailUrl,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void notifyBeforeLikeClick(String? videoId) => super.noSuchMethod(
    Invocation.method(#notifyBeforeLikeClick, [videoId]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyAfterLikeClick(String? videoId, bool? isLiked, int? likeCount) =>
      super.noSuchMethod(
        Invocation.method(#notifyAfterLikeClick, [videoId, isLiked, likeCount]),
        returnValueForMissingStub: null,
      );

  @override
  void notifyShareClick({
    required String? videoId,
    required String? videoUrl,
    required String? title,
    required String? description,
    String? thumbnailUrl,
  }) => super.noSuchMethod(
    Invocation.method(#notifyShareClick, [], {
      #videoId: videoId,
      #videoUrl: videoUrl,
      #title: title,
      #description: description,
      #thumbnailUrl: thumbnailUrl,
    }),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [VideoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoLocalDataSource extends _i1.Mock
    implements _i8.VideoLocalDataSource {
  MockVideoLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<List<_i3.VideoModel>> getVideos() =>
      (super.noSuchMethod(
            Invocation.method(#getVideos, []),
            returnValue: _i9.Future<List<_i3.VideoModel>>.value(
              <_i3.VideoModel>[],
            ),
          )
          as _i9.Future<List<_i3.VideoModel>>);

  @override
  _i9.Future<_i3.VideoModel?> getVideoById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getVideoById, [id]),
            returnValue: _i9.Future<_i3.VideoModel?>.value(),
          )
          as _i9.Future<_i3.VideoModel?>);

  @override
  _i9.Future<_i3.VideoModel> toggleLike(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleLike, [videoId]),
            returnValue: _i9.Future<_i3.VideoModel>.value(
              _FakeVideoModel_2(
                this,
                Invocation.method(#toggleLike, [videoId]),
              ),
            ),
          )
          as _i9.Future<_i3.VideoModel>);

  @override
  _i9.Future<_i3.VideoModel> incrementShareCount(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#incrementShareCount, [videoId]),
            returnValue: _i9.Future<_i3.VideoModel>.value(
              _FakeVideoModel_2(
                this,
                Invocation.method(#incrementShareCount, [videoId]),
              ),
            ),
          )
          as _i9.Future<_i3.VideoModel>);
}

/// A class which mocks [VideoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoRepository extends _i1.Mock implements _i5.VideoRepository {
  MockVideoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<List<_i4.VideoEntity>> getVideos() =>
      (super.noSuchMethod(
            Invocation.method(#getVideos, []),
            returnValue: _i9.Future<List<_i4.VideoEntity>>.value(
              <_i4.VideoEntity>[],
            ),
          )
          as _i9.Future<List<_i4.VideoEntity>>);

  @override
  _i9.Future<_i4.VideoEntity?> getVideoById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getVideoById, [id]),
            returnValue: _i9.Future<_i4.VideoEntity?>.value(),
          )
          as _i9.Future<_i4.VideoEntity?>);

  @override
  _i9.Future<_i4.VideoEntity> toggleLike(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleLike, [videoId]),
            returnValue: _i9.Future<_i4.VideoEntity>.value(
              _FakeVideoEntity_3(
                this,
                Invocation.method(#toggleLike, [videoId]),
              ),
            ),
          )
          as _i9.Future<_i4.VideoEntity>);

  @override
  _i9.Future<_i4.VideoEntity> incrementShareCount(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#incrementShareCount, [videoId]),
            returnValue: _i9.Future<_i4.VideoEntity>.value(
              _FakeVideoEntity_3(
                this,
                Invocation.method(#incrementShareCount, [videoId]),
              ),
            ),
          )
          as _i9.Future<_i4.VideoEntity>);
}

/// A class which mocks [GetVideosUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVideosUseCase extends _i1.Mock implements _i10.GetVideosUseCase {
  MockGetVideosUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.VideoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeVideoRepository_4(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i5.VideoRepository);

  @override
  _i9.Future<List<_i4.VideoEntity>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i9.Future<List<_i4.VideoEntity>>.value(
              <_i4.VideoEntity>[],
            ),
          )
          as _i9.Future<List<_i4.VideoEntity>>);
}

/// A class which mocks [GetVideoByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVideoByIdUseCase extends _i1.Mock
    implements _i11.GetVideoByIdUseCase {
  MockGetVideoByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.VideoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeVideoRepository_4(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i5.VideoRepository);

  @override
  _i9.Future<_i4.VideoEntity?> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i9.Future<_i4.VideoEntity?>.value(),
          )
          as _i9.Future<_i4.VideoEntity?>);
}

/// A class which mocks [ToggleLikeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockToggleLikeUseCase extends _i1.Mock implements _i12.ToggleLikeUseCase {
  MockToggleLikeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.VideoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeVideoRepository_4(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i5.VideoRepository);

  @override
  _i9.Future<_i4.VideoEntity> call(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [videoId]),
            returnValue: _i9.Future<_i4.VideoEntity>.value(
              _FakeVideoEntity_3(this, Invocation.method(#call, [videoId])),
            ),
          )
          as _i9.Future<_i4.VideoEntity>);
}

/// A class which mocks [IncrementShareCountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIncrementShareCountUseCase extends _i1.Mock
    implements _i13.IncrementShareCountUseCase {
  MockIncrementShareCountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.VideoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeVideoRepository_4(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i5.VideoRepository);

  @override
  _i9.Future<_i4.VideoEntity> call(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [videoId]),
            returnValue: _i9.Future<_i4.VideoEntity>.value(
              _FakeVideoEntity_3(this, Invocation.method(#call, [videoId])),
            ),
          )
          as _i9.Future<_i4.VideoEntity>);
}
